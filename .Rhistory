avector
PSData$gmbfit <-
avector <- as.vector(PSData$gmbfit[2])
PSData$gmbfit <-
avector <- as.vector(PSData$gmbfit[1])
class(avector)
avector[,1]
class(avector[,1])
class(PSData$gmbfit[,1])
# the generated gmbfit is a dataframe
# need to convert it to a vector
PSData$gmbfit <- PSData$gmbfit[,1]
PSData %>% ggplot(aes(x = gmbfit)) +
geom_histogram(color = "white") +
facet_wrap(~package) +
xlab("Probability of purchaing gold package: PS")
boxplot(gmbfit~package, data = PSData)
summary(greedy)
summary(genetic)
## Optimal Matching
optimal <- matchit(psmodel, distance = datacleaned$tps, data = datacleaned,
method = "optimal", ratio = 1)
summary(optimal)
optimal
readydata <-match.data(genetic)
analysis <- svydesign(ids = ~1, weights = ~weights, data = readydata)
modelgenetic <- svyglm(rating~package, analysis, family = gaussian())
summary(modelgenetic)
modelgenetic2 <- svyglm(rating ~ package + college + unemployed + age + similarsoftwareused + multiplecomputers +
income + employerreimbursement + married, analysis, family = gaussian())
summary(modelgenetic2)
greedy2 <- with(datacleaned, Match(Y = rating, Tr = package, X = logitscored, estimand = "ATT",
M = 1, replace = FALSE, ties = FALSE))
psens(greedy2, Gamma = 10, GammaInc = .1)
## stratification approach
datacleaned$ATTw <- with(datacleaned, ifelse(package == 1, 1, logistscored/(1-logistscored)))
## stratification approach
datacleaned$ATTw <- with(datacleaned, ifelse(package == 1, 1, logitscored/(1-logitscored)))
with(datacleaned, by(ATTw, package, summary))
# check balance
model <- glm(income ~ package, weights = ATTw, data = datacleaned)
summary(model)
model <- glm(age ~ package, weights = ATTw, data = datacleaned)
summary(model)
model <- glm(married ~ package, weights = ATTw, data = datacleaned, family = "binomial")
summary(model)
model <- glm(college ~ package, weights = ATTw, data = datacleaned, family = "binomial")
summary(model)
model <- glm(rating ~ package, weights = ATTw, data = datacleaned)
summary(model)
model2 <-glm(rating ~ package + college + unemployed + age + similarsoftwareused + multiplecomputers +
income + employerreimbursement + married, analysis, weights = ATTw, data = datacleaned)
model2 <-glm(rating ~ package + college + unemployed + age + similarsoftwareused + multiplecomputers +
income + employerreimbursement + married, weights = ATTw, data = datacleaned)
summary(model2)
# sensitivity
p_load(treatSens)
sens <- treatSens(formular = rating ~ package + logitscored + |(logitscored^2) + |(logitscored^3),
trt.family = binomial(link = "probit"), grid.dim = c(5, 5), nsim = 20, data = datacleaned,
weights = datacleaned$ATTw)
sens <- treatSens(formula = rating ~ package + logitscored + I(logitscored^2) + I(logitscored^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, data = datacleaned, weights = datacleaned$ATTw)
summary(sens)
# Additional
# Weighting
datacleaned$ATTw <- with(datacleaned, ifelse(package == 1, 1, logitscored/(1-logitscored)))
datacleaned$wt, datacleaned, ifelse(ATTw > quantile(ATTw, .99, quantile(ATTw, .99), ATTw))
datacleaned$wt <- with(datacleaned, ifelse(ATTw > quantile(ATTw, .99), quantile(ATTw, .99), ATTw))
## assessing balance (to be added)
## effect estimate
wtd.t.test(treated, control, weight = wt, bootse = TRUE, bootn = 5000, data = datacleaned)
## assessing balance (to be added)
## effect estimate
p_load(weights)
wtd.t.test(treated, control, weight = wt, bootse = TRUE, bootn = 5000, data = datacleaned)
stratification <- matchit(psmodel, data = datacleaned, method = "subclass", sub.by = "treat", subclass = 5)
data.stratum <- match.data(stratification)
## checking balance
bcheck <- summary(data.stratum, standardize = TRUE)
bcheck
## checking balance
bcheck <- summary(data.stratum, standardize = TRUE)
bcheck
stdmeandifferences <- data.frame(stratification$q.table[,3,])
summary(stdmeandifferences)
summary(abs(bcheck$sum.subclass$"Std.Mean Diff."))
summary(abs(bcheck$sum.subclass$"Std. Mean Diff."))
summary(abs(bcheck$sum.subclass$"Std. Mean Diff."))
bcheck
bcheck$sum.subclass
bcheck[sum.subclass]
is.recursive(bcheck)
type(bcheck)
class(bcheck)
data.stratum
## checking balance
bcheck <- summary(data.stratum, standardize = TRUE)
bcheck.subclass
bcheck$subclass
bcheck[subclass]
bcheck <- data.frame(bcheck)
summary(abs(bcheck$sum.subclass$"Std. Mean Diff."))
bcheck$subclass
## checking balance
bcheck <- summary(data.stratum, standardize = TRUE)
## getting weights
design <- svydesign(id = ~0, data = data.stratum)
boots <- as.svrepdesign(design, type = c("bootstrap"), replicates = 5000)
stratummeans <- svyby(formula = ~dependent, by = ~condition + subclass, design = boots, FUN = svymean, covmat = TRUE)
stratummeans <- svyby(psmodel = ~dependent, by = ~condition + subclass, design = boots, FUN = svymean, covmat = TRUE)
weightedmeandifference <- svycontrast(stratummeans, list( ATE = c(-wc1,wT1, …), ATT = c(-wc1,wT1, …)))
wtd.t.test(condition, dependent, weight = ATTw, bootse = TRUE, bootn = 5000)
data.stratum$ATTw <- with(data.stratum, ifelse(condition = “treated”, 1, N.1s*propt[1]/N.0s*propt[2]))
data.stratum$ATTw <- with(data.stratum, ifelse(condition = "treated", 1, N.1s*propt[1]/N.0s*propt[2]))
ntreat <- data.frame(table(data.stratum$subclass[data.stratum$condition == “treated”]))
ntreat <- data.frame(table(data.stratum$subclass[data.stratum$condition == "treated"]))
names(ntreat) <- c("subclass", "N.1s")
names(ntreat) <- c("subclass", "N.1s")
ntreat
View(ntreat)
library(readxl)
Exam3Review <- read_excel("~/Downloads/Exam3Review.xlsx")
View(Exam3Review)
p_load(treatSens)
p_load(weights)
Exam3Review$educationyears <- factor(Exam3Review$educationyears)
Exam3Review$married <- factor(Exam3Review$married)
Exam3Review$formaltraining <- factor(Exam3Review$formaltraining)
Exam3Review$haskids <- factor(Exam3Review$haskids)
Exam3Review$criminalrecord <- factor(Exam3Review$criminalrecord)
Exam3Review$gender <- factor(Exam3Review$gender)
Exam3Review$haskids <- factor(Exam3Review$haskids)
Exam3Review$nonwhite <- factor(1 - Exam3Review$black - Exam3Review$hispanic - Exam3Review$asian)
Exam3Review$change <- scale(Exam3Review$earningsend - Exam3Review$earningsstart)
View(Exam3Review)
# propensity scores
summary(glm(trainingtaken ~ age + educationyears + nonwhite + married + formaltraining + earningsstart + haskids +
criminalrecord + gender, data = Exam3Review, family = "binomial"))
p_load(vif)
# propensity scores
model <- glm(trainingtaken ~ age + educationyears + nonwhite + married + formaltraining + earningsstart + haskids +
criminalrecord + gender, data = Exam3Review, family = "binomial")
vif(model)
p_load(vif)
vif(model)
p_load(car)
vif(model)
# propensity scores
model <- glm(trainingtaken ~  nonwhite + married + haskids +
criminalrecord + gender, data = Exam3Review, family = "binomial")
summary(model)
psmodelfinal <- glm(trainingtaken ~ nonwhite + haskids, data = Exam3Review, family = "binomial")
summary(psmodelfinal)
psmodelfinal <- glm(trainingtaken ~ nonwhite + haskids + formaltraining, data = Exam3Review, family = "binomial")
summary(psmodelfinal)
vif(psmodelfinal)
psform <- formula("trainingtaken ~ nonwhite + haskids + formaltraining")
Exam3Review$ps <- fitted(glm(psform, family = "binomial", data = Exam3Review))
Exam3Review %>% ggplot(aes(x = ps)) + geom_histogram(color = "white") + facet_wrap((~trainingtaken))
# mtry should be smaller than the number of
controls <- cforest_unbiased(ntree = 5000, mtry = 3)
forest <- cforest(psform, data = Exam3Review, controls = controls)
forestfit <- predict(forest, type = "prob")
Exam3Review$forestps <- matrix(unlist(forestfit, , 2, byrow = TRUE))[,2]
Exam3Review$forestps <- matrix(unlist(forestfit), , 2, byrow = TRUE))[,2]
Exam3Review$forestps <- matrix(unlist(forestfit), , 2, byrow = TRUE)[,2]
Exam3Review %>% ggplot(aes(x = forestps)) + geom_histogram(color = "white") + facet_wrap((~trainingtaken))
# to ratio(?)
Exam3Review$fps <- log(Exam3Review$ps/(1-Exam3Revies$ps))
# to ratio(?)
Exam3Review$fps <- log(Exam3Review$ps/(1-Exam3Reviews$ps))
# to ratio(?)
Exam3Review$fps <- log(Exam3Review$ps/(1-Exam3Review$ps))
stratfied <- matchit(psf, data = Exam3Review, distance = Exam3Review$fps, method = "subclass", sub.by = "treat",
subclass = 4)
stratfied <- matchit(psform, data = Exam3Review, distance = Exam3Review$fps, method = "subclass", sub.by = "treat",
subclass = 4)
stratfied
stratfied <- matchit(psform, data = Exam3Review, distance = Exam3Review$fps, method = "subclass", sub.by = "treat",
subclass = 3)
stratfied <- matchit(psform, data = Exam3Review, distance = Exam3Review$fps, method = "subclass", sub.by = "treat",
subclass = 2)
stratfied
stratumworking <- match.data(stratified)
stratumworking <- match.data(stratfied)
summary(stratfied, standardized = TRUE)
summary(stratfied, standardize = TRUE)
check <- summary(stratfied, standardize = TRUE)
stdm <- data.frame(check$q.table[,3,])
summary(stdm)
design <- svydesign(id = ~0, data = stratumworking)
ntreat <- data.frame(table(stratumworking$subclass[stratumworking$trainingtaken == 1]))
names(ntreat) <- c("subclass", "N.1s")
ncontrol <- data.frame(table(stratumworking$subclass[stratumworking$trainingtaken == 0]))
names(ncontrol) <- c("subclass", "N.0s")
sounts <- merge(ntreat, ncontrol)
stratumworking <- merge(stratumworking, scounts)
scounts <- merge(ntreat, ncontrol)
stratumworking <- merge(stratumworking, scounts)
propt <- svymean(~ factor(trainingtaken, design))
propt <- svymean(~ factor(trainingtaken), design)
stratumworking$ATTw <- with(stratumworking, ifelse(trainingtaken == 1,1,stratumworking$N.1s*propt[1]/stratumworking$N.0s*propt[2]))
bal.stat(stratumworking, estimand = "ATT", w.all = stratumworking$ATTw, vars = cbind("nonwhite", "haskids", "formaltraining"),
sampw = 1, get.ks = FALSE, treat.var = stratumworking$trainingtaken, multinom = FALSE)
bal.stat(stratumworking, estimand = "ATT", w.all = stratumworking$ATTw, vars = cbind("nonwhite", "haskids", "formaltraining"),
sampw = 1, get.ks = FALSE, treat.var = factor(stratumworking$trainingtaken), multinom = FALSE)
stratumworking$c2 <- ifelse(stratumworking$trainingtaken == 1,1,0)
bal.stat(stratumworking, estimand = "ATT", w.all = stratumworking$ATTw, vars = cbind("nonwhite", "haskids", "formaltraining"),
sampw = 1, get.ks = FALSE, treat.var = c2, multinom = FALSE)
bal.stat(stratumworking, estimand = "ATT", w.all = stratumworking$ATTw, vars = cbind("nonwhite", "haskids", "formaltraining"),
sampw = 1, get.ks = FALSE, treat.var = "c2", multinom = FALSE)
design <- svydesign(ids = ~0, weights = stratumworking$ATTw, data = stratumworking)
design <- as.svrepdesign(design, type = c("bootstrap"), replicates = 5000)
finalmodel <- svyglm(change ~ factor(trainingtake) + age + as.numeric(educationyears) + nonwhite + married +
formaltraining + earningsstart + haskides + criminalrecord + gender, design = design, family = gaussian())
finalmodel <- svyglm(change ~ factor(trainingtake) + age + as.numeric(educationyears) + nonwhite + married +
formaltraining + earningsstart + haskids + criminalrecord + gender, design = design, family = gaussian())
finalmodel <- svyglm(change ~ factor(trainingtaken) + age + as.numeric(educationyears) + nonwhite + married +
formaltraining + earningsstart + haskids + criminalrecord + gender, design = design, family = gaussian())
summary(finalmodel)
stratification <- matchit(psmodel, data = datacleaned, method = "subclass", sub.by = "treat", distance = datacleaned$logitscored, subclass = 5)
data.stratum <- match.data(stratification)
bcheck <- summary(stratification, standardize = TRUE)
stdmeandifferences <- data.frame(bcheck$q.table[,3,])
summary(stdmeandifferences)
summary(abs(bcheck$sum.subclass$"Std. Mean Diff."))
design <- svydesign(id = ~0, data = data.stratum) #ignore error
ntreat <- data.frame(table(data.stratum$subclass[data.stratum$package == 1]))
names(ntreat) <- c("subclass", "N.1s")
ncontrol <- data.frame(table(data.stratum$subclass[data.stratum$package == 0]))
names(ncontrol) <- c("subclass", "N.0s")
scounts <- merge(ntreat, ncontrol)
data.stratum <- merge(data.stratum, scounts)
data.stratum$ATTw <- with(data.stratum, ifelse(package == 1, 1, data.stratum$N.1s*propt[1]/data.stratum$N.0s*propt[2]))
xtabs(~ATTw+subclass, data.stratum)
data.stratum$ATTw  <- data.stratum$ATTw/mean(data.stratum$ATTw)
data.stratum$p2 <- ifelse(data.stratum$package == 1, 1, 0)
table <- bal.stat(data.stratum, estimand = "ATT", w.all = data.stratum$ATTw, get.ks = FALSE,
vars = cbind("college", "unemployed","age", "similarsoftwareused", "multiplecomputers", "income", "employerreimbursement", "married"),
treat.var = "p2", multinom = FALSE, sampw = 1)
balancetable  <- table$results[,1:5]
design <- svydesign(ids = ~0, weights = data.stratum$ATTw, data = data.stratum)
design <- as.svrepdesign(design, type = c("bootstrap"), replicates = 5000)
model <- svyglm(rating ~ package +college+unemployed+age+similarsoftwareused+multiplecomputers+income+employerreimbursement+married , design, family = gaussian())
summar(model)
summary(model)
sens <- treatSens(formula = rating ~ package + logitscored + I(logitscored^2) + I(logitscored^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, data = data.stratum, weights = data.stratum$ATTw)
sensPlot(sens)
sens
summary(sens)
# combine vectors to data frame
pirates <- data.frame("Name" = c("Astrid", "Lea", "Sarina", "Remon", "Letizia", "Babice", "Jonas", "Wendy", "Niveditha", "Gioia"),
"Sex" = c("F", "F", "F", "M", "F", "F", "M", "F", "F", "F"),
"Age" = c(30, 25, 25, 29, 22, 22, 35, 19, 32, 21),
"Superhero" = c("Batman", "Superman", "Batman", "Spiderman", "Batman", "Antman", "Batman", "Superman", "Maggott", "Superman"),
"Tattos" = c(11, 15, 12, 5, 65, 3, 9, 13, 900, 0),
stringsAsFactors = FALSE)
# View the structure of the data frame
str(pirates)
# Add an column of tattos per year
pirates$Tattos.Age <- pirates$Tattos/pirates$Age
View(pirates)
# combine vectors to data frame
pirates <- data.frame("Name" = c("Astrid", "Lea", "Sarina", "Remon", "Letizia", "Babice", "Jonas", "Wendy", "Niveditha", "Gioia"),
"Sex" = c("F", "F", "F", "M", "F", "F", "M", "F", "F", "F"),
"Age" = c(30, 25, 25, 29, 22, 22, 35, 19, 32, 21),
"Superhero" = c("Batman", "Superman", "Batman", "Spiderman", "Batman", "Antman", "Batman", "Superman", "Maggott", "Superman"),
"Tattos" = c(11, 15, 12, 5, 65, 3, 9, 13, 900, 0),
stringsAsFactors = FALSE)
View(pirates)
# median age
median(pirates$Age)
# mean age of female
View(pirates)
# mean age of female
female <- subset(x = pirates,
subset = sex == "F")
# mean age of female
female <- subset(x = pirates,
subset = Sex == "F")
female
mean(female$Age)
# mean age of male
male <- subset(x = pirates, subset = Sex == "M") # select entries of female and create a new frame
mean(male$Age) # calculate the mean of the column "age"
# What was the most number of tattoos owned by a male pirate?
max(pirates$Tattos)
# percent of pirates under the age of 32 who were female
under32 <- subset(x = pirates, subset = Age < 32)
under32
male_number = nrow(pirates[pirates$Sex == "M"]) # number of rows which presents a male pirate
male_number = nrow(pirates[pirates$Sex == "M") # number of rows which presents a male pirate
pirates[pirates$Sex == "M"]
pirates[pirates$Sex == "M",]
under32
female_number = nrow(pirates[pirates$Sex == "F"]) # number of rows which presents a female pirate
male_number = nrow(pirates[pirates$Sex == "M"],) # number of rows which presents a male pirate
male_number = nrow(pirates[pirates$Sex == "M",]) # number of rows which presents a male pirate
female_number = nrow(pirates[pirates$Sex == "F",]) # number of rows which presents a female pirate
total_number = nrow(under32) # total number of pirates under 32 years old
rete <- female_number / total_number
rate <- female_number / total_number
rate
rate <- as.number(female_number / total_number)
total_number
female_number
# percent of pirates under the age of 32 who were female
under32 <- subset(x = pirates, subset = Age < 32)
total_number = nrow(under32) # total number of pirates under 32 years old
total_number
under32
female_number
male_number
total_number = count(under32) # total number of pirates under 32 years old
total_number = count(under32,) # total number of pirates under 32 years old
# percent of pirates under the age of 32 who were female
library(dplyr)
count(under32, "name")
count(under32, "Name")
a <- count(under32, "Name")
a
a$n
total_number <- nrow(under32) # total number of pirates under 32 years old
total_number
male_number <- nrow(pirates[pirates$Sex == "M",]) # number of rows which presents a male pirate
male_number
a <- count(under32)
a$n
total_number <- count(under32)$n # total number of pirates under 32 years old
total_number
male_number <- count(pirates[pirates$Sex == "M",])$n # number of rows which presents a male pirate
male_number
under32
pirates[pirates$Sex == "M",]
male_number = nrow(under32[under32$Sex == "M",]) # number of rows which presents a male pirate
male_number
female_number = nrow(under32[under32$Sex == "F",]) # number of rows which presents a female pirate
female_number
rate <- female_number / total_number
rate
total_female <- nrow(female)
total_female
female
female_32 <- subset(x = female, subset = Age < 32) # select the females who are under 32
female_32
number_female_32 <- nrow(female_32) # number of females who are under 32
number_female_32
rate2 <- number_female_32 / total_female # calculate percentage
rate2
# dd a new column to the dataframe called tattoos.per.year which shows how many tattoos each pirate has for each year in their life.
pirates$tattoos.per.year <- pirates$Tattoos/pirates$Age
# dd a new column to the dataframe called tattoos.per.year which shows how many tattoos each pirate has for each year in their life.
pirates$tattoos.per.year <- pirates$Tattoos/pirates$Age
# dd a new column to the dataframe called tattoos.per.year which shows how many tattoos each pirate has for each year in their life.
pirates$tattoos.per.year <- (pirates$Tattoos)/(pirates$Age)
pirates$Tattoos
pirates
# dd a new column to the dataframe called tattoos.per.year which shows how many tattoos each pirate has for each year in their life.
pirates$tattoos.per.year <- (pirates$Tattos)/(pirates$Age)
#  Which pirate had the most number of tattoos per year?
max(pirates$tattoos.per.year)
subset(x = pirates, subset = tattoos.per.year == max_tatto) # find the pirate
#  Which pirate had the most number of tattoos per year?
max_tatto <- max(pirates$tattoos.per.year) # find the largest tattos per year number
subset(x = pirates, subset = tattoos.per.year == max_tatto) # find the pirate
pirate_max_tattos$Name
pirate_max_tattos <- subset(x = pirates, subset = tattoos.per.year == max_tatto) # find the pirate
pirate_max_tattos$Name
pirate_max_tattos <- subset(x = pirates,
subset = tattoos.per.year == max_tatto,
select = Name) # find the pirate and return the name
pirate_max_tattos # return the name
like_superman <- subset(x = pirates,
subset = Sex == "F" &
Superhero == "Superman",
select = Name)
like_superman
# What was the median number of tattoos of pirates over the age of 20 whose favorite superhero is Spiderman?
spiderman_20 <- subset(x = pirates,
subset = Sex == "M" &
Superhero == "Spiderman") # find the pirates over 20 and favor Spiderman
median(spiderman_20$Tattos)
setwd("/Users/birdfish/Documents/GitHub/EDA")
knitr::opts_chunk$set(echo = TRUE)
# set working directory
setwd("/Users/birdfish/Documents/GitHub/EDA")
# market share
plot(df$Avg, xlab = "Bikes")
## by market share -----------------
plot(df$Avg, xlab = "Bikes")
boxplot(df$Avg ~ df$category1, ylab = "Average Market Share")
# Created by Kunpeng Yang
# Last updated 1/17 2019
# import data
df <-read.csv("Data/bikeVendors.csv")
# View data
top_n(df, 10)
levels(df$category1)
levels(df$category2)
levels(df$frame)
# View data structure
str(df)
# Explore data -----------------------------------------------------------
## by price ------------------------
df1 <- df[order(df$price),] # sort data by price
barplot(df1$price, names.arg=df1$model, xlab = "Bike model", ylab = "Price",
main = "Bike Price", col = "green", border = "white")
boxplot(df$price, main = "Bike Price")
boxplot(df$price~df$category1, ylab = "Average Price") # Mountain bike vs Road bike
## by market share -----------------
# select mountain bikes
mountain <- subset(x = df, subset = category1 == "Mountain")
# select road bikes
road <- subset(x = df, subset = category1 == "Road")
# plot mountain bike mkt shares
plot(mountain$Avg, type = "o", col = "red", xlab = "Bike model", ylab = "Average Market Share",
main = "Average market share of bikes by categories")
# add line of road bike shares
lines(road$Avg, type = "o", col = "blue")
# box plot
boxplot(df$Avg ~ df$category1, ylab = "Average Market Share")
## clusters--------------------------------------------------
library(cluster)
library(factoextra)
# drop categorial data fields
drops <- c("model", "category1", "category2", "frame")
bike2 <- df
bike2 <- bike2[, !(names(bike2) %in% drops)]
# use bike models as row names
bike_model <- df$model
row.names(bike2) <- bike_model
bike2$price <- as.numeric(bike2$price)
bike2 <- na.omit(bike2) # remove missing value
bike2 <- scale(bike2) # scaling to avoid influence of unit
set.seed(123)
fviz_nbclust(bike2, kmeans, method = "wss")
# Average Silhousette Method
fviz_nbclust(bike2, kmeans, method = "silhouette")
# Gap Statistic Method
gap_stat <- clusGap(bike2, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
# use 4 clusters
k4 <- kmeans(bike2, centers = 4, nstart = 25)
fviz_cluster(k4, data = bike2)
# Price ~ Category t-test ----------------------------------------------
# check dependent variable distribution
plot(density(df$price))
# check skewness
library(moments)
agostino.test(df$price)
# fix positive skew
agostino.test(sqrt(df$price))
# build model
price_category <- t.test(sqrt(price) ~ category1, data = df)
price_category
# Price ~ Frame t test ----------------------------------------------
# View average price of different types of bikes
boxplot(df$price~df$frame, ylab = "Average Price")
# check distribution
plot(density(df$price))
# check skewness
library(moments)
agostino.test(df$price)
# fix positive skew
agostino.test(sqrt(df$price))
# build model
price_category <- t.test(sqrt(price) ~ frame, data = df)
price_category
# Which model has the highest market share -----------------------------------------
# Adding a colume of average market share
# row sum is divided by 30 because there are 30 stores in the dataset
library(tidyverse)
df <- df %>%
mutate(Avg_percentage = select(., Albuquerque.Cycles:Wichita.Speed) %>% rowSums(na.rm = TRUE)*100/30)
# sort data by average market share
sorted_mkt <- df[order(df$Avg_percentage, decreasing = TRUE),]
sorted_mkt[, c("model", "category1", "price", "Avg_percentage" )]
pie(df$Avg_percentage, labels = df$model)
# Market share ~ price ####
plot(density(df$Avg_percentage))
agostino.test(df$price)
agostino.test(df$Avg_percentage)
agostino.test(log(df$price))
# build model
price_category <- t.test(log(price) ~ category1, data = df)
price_category
# build model
price_category <- t.test(log(price) ~ frame, data = df)
# fix positive skew
agostino.test(log(df$price))
# build model
price_category <- t.test(log(price) ~ frame, data = df)
price_category
# identify relationship between predictor and dependent variable
scatterplot(df$price, df$Avg_percentage)
# identify relationship between predictor and dependent variable
library(car)
scatterplot(df$price, df$Avg_percentage)
mkt_model <- lm(df$Avg_percentage ~ df$price)
summary(mkt_model)
mkt_model2 <- lm(df$Avg_percentage ~ (df$price)^2)
summary(mkt_model2)
mkt_model2 <- lm(df$Avg_percentage ~ (df$price)^2 + df$price)
summary(mkt_model2)
mkt_model2 <- lm(Avg_percentage ~ price^2 + price, data = df)
summary(mkt_model2)
mkt_model2 <- lm(Avg_percentage ~ price^3 + price^2 + price, data = df)
summary(mkt_model2)
# check residuals
qqnorm(mkt_model$residuals)
qqline(mkt_model$residuals)
shapiro.test(mkt_model$residuals)
