pirates$tattoos.per.year <- pirates$Tattoos/pirates$Age
# dd a new column to the dataframe called tattoos.per.year which shows how many tattoos each pirate has for each year in their life.
pirates$tattoos.per.year <- (pirates$Tattoos)/(pirates$Age)
pirates$Tattoos
pirates
# dd a new column to the dataframe called tattoos.per.year which shows how many tattoos each pirate has for each year in their life.
pirates$tattoos.per.year <- (pirates$Tattos)/(pirates$Age)
#  Which pirate had the most number of tattoos per year?
max(pirates$tattoos.per.year)
subset(x = pirates, subset = tattoos.per.year == max_tatto) # find the pirate
#  Which pirate had the most number of tattoos per year?
max_tatto <- max(pirates$tattoos.per.year) # find the largest tattos per year number
subset(x = pirates, subset = tattoos.per.year == max_tatto) # find the pirate
pirate_max_tattos$Name
pirate_max_tattos <- subset(x = pirates, subset = tattoos.per.year == max_tatto) # find the pirate
pirate_max_tattos$Name
pirate_max_tattos <- subset(x = pirates,
subset = tattoos.per.year == max_tatto,
select = Name) # find the pirate and return the name
pirate_max_tattos # return the name
like_superman <- subset(x = pirates,
subset = Sex == "F" &
Superhero == "Superman",
select = Name)
like_superman
# What was the median number of tattoos of pirates over the age of 20 whose favorite superhero is Spiderman?
spiderman_20 <- subset(x = pirates,
subset = Sex == "M" &
Superhero == "Spiderman") # find the pirates over 20 and favor Spiderman
median(spiderman_20$Tattos)
getwd()
setwd("/Users/birdfish/Documents/Github/EDA")
import(tidyverse)
library(tidyverse)
setwd("/Users/birdfish/Documents/Github/EDA")
read_csv("Data/gapminder.csv")
# Read csv files ####
library(tidyverse) # load tidyverse package
setwd("/Users/birdfish/Documents/Github/EDA") # set working directory
data <- read_csv("Data/gapminder.csv") # import csv file
# Parcing vectors ####
# number
parse_double("3,14", locale = locale(decimal_mark = ","))
parse_double("This function extract numbers from strings like this 95%")
parse_double("like 95%")
parse_double("It cost $123.45")
# Parcing vectors ####
# number
parse_number("3,14", locale = locale(decimal_mark = ","))
parse_number("This function extract numbers from strings like this 95%")
parse_number("This function extract numbers from strings like this 95% or $32")
# Factors
animals <- c("cat", "dog") # set levels
parse_factor(c("dog", "cat", "dog"), levels = animals)
parse_factor(c("cat", "dog", "pig"), levels = animals)
# Date and/or time
parse_datetime("20190101T1230")
parse_datetime("20190101") # date only
parse_date("20190101") # date only
parse_date("2019-01-01") # Expects - or / as seperator
parse_date("2019/01/01")
# Time
library(hms)
parse_time("12:")
parse_time("12:30")
parse_time("12:30 am")
parse_date("19/01/01", "%d/%m/%y")
parse_date("19/01/01", "%y/%m/%d")
parse_date("19/01/01", "%d/%m/%y")
# File
parsefile <- read_csv("Data/gapminder.csv",
col_types = cols(
x = col_character(),
y = col_integer()
)
)
# Writing to a file ####
write_csv(data, "export.csv")
write_res(data, "export.res")
readr::write_res(data, "export.res")
readr::write_res(data, "export.res")
write_rds(data, "export.rds")
library(feather)
install.packages("feather")
# Writing to a file ####
write_csv(data, "Data/export.csv") # write data to a csv file named export.csv
write_rds(data, "Data/export.rds") # use rds wrappers
# Writing to a file ####
write_csv(data, "Data/export_csv.csv") # write data to a csv file named export.csv
write_rds(data, "Data/export_rds.rds") # use rds wrappers
write_feather(data, "Data/export_feather.feather")
library(feather)
write_feather(data, "Data/export_feather.feather")
# Read other file types ####
read.delim("Data/RExam.dat")
readxl("Data/RDD Example.xls")
library(tidyverse)
readxl("Data/RDD Example.xls")
install.packages("readxl")
readxl("Data/RDD Example.xls")
install.packages("readxl")
readxl("Data/RDD Example.xls")
library(readxl)
readxl("Data/RDD Example.xls")
readxl::readxl("Data/RDD Example.xls")
readxl::read_xlsx("Data/RDD Example.xls")
# Data transformation ####
library(tidyverse)
data <- car
data <- cars
View(data)
library(ggplot2)
data <- mtcars
View(data)
View(data)
cars
cars <- mtcars
View(cars)
# Filter ####
filter(cars, cyl == 4, gear == 5)
filter(cars, mpg > 30)
str(cars)
filter(cars, mpg < 20 | hp > 150)
# Arrange rows ####
arrange(model, mpg, ID)
# Arrange rows ####
arrange(cars,model, mpg, ID)
# Arrange rows ####
arrange(cars, model, mpg, ID)
# Arrange rows ####
arrange(cars, gear, hp, mpg)
arrange(cars, desc(hp))
# Select columns ####
select(cars, mpg, hp, gear) # select fields
select(cars, mpg:gear)
# Add new variables ####
mutate(cars,
power = hp/wt,
efficiency = drat/mpg)
mutate(cars,
km_per_Litter = mpg/1.6/3.79) # add a new column which converts mpg to km per litter
# Grouped summaries ####
summarise(cars, efficiency = mean(mpg, na.rm = TRUE)) # calculate average mpg
by_size <- group_by(cars, cyl, carb)
summarise(by_size, efficiency = mean(mpg, na.rm = TRUE))
miles <- cars %>%
group_by(cyl) %>%
summarise(
effi = mean(mpg)
)
ggplot(data = miles, mapping = aes(x = effi)) +
geom_freqpoly(binwith = 10)
install.packages("ggthemes")
library(ggthemes)
install.packages("GGally")
# load packages
library(tidyverse)
library(cluster)
library(factoextra)
df <- mtcars
df <- na.omit(df)
df <- scale(df)
head(df)
distance <- get_dist(df)
fviz_dist(distance, gradient = list(low = low = "#00AFBB", mid = "white", high = "#FC4E07")) # plot distance
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07")) # plot distance
# K-means ####
k3 <- kmeans(df, centers = 3, nstart = 25)
str(k2)
str(k3)
fviz_cluster(k3, data = df)
# K-means ####
k4 <- kmeans(df, centers = 4, nstart = 25)
fviz_cluster(k4, data = df)
# multiple plots of different clusters
k3 <- kmeans(df, centers = 3, nstart = 25) # set clusters to 3
k4 <- kmeans(df, centers = 4, nstart = 25) # set clusters to 4
k5 <- kmeans(df, centers = 5, nstart = 25) # set clusters to 5
# multiple plots of different clusters
k2 <- kmeans(df, centers = 2, nstart = 25) # set clusters to 2
p1 <- fviz_cluster((k2, geom = "point", data = df) + ggtitle("k = 2"))
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow=2)
kmeans(df, k, nstart = 10 )$tot.withinss # function to compute total within-cluster sum of square
# Find optimal clusters ####
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10 )$tot.withinss # function to compute total within-cluster sum of square
}
k.values <- 1:15 # Compute and plot wss for k = 1 to k = 15
wss_values <- map_dbl(k.values, wss) # extract wss for 2-15 clusters
fviz_nbclust(df, kmeans, method = "wss")
# Average Silhousette Method ####
fviz_nbclust(df, kmeans, method = "silhouette")
#
fviz_gap_stat(gap_stat)
#
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
# Extracting Results ####
# Analysis above found the optimal number of clusters is 9 or 10
# I will perform final analysis with 9 clusters
set.seed(111)
final <- kmeans(df, 9, nstart = 25)
print(final)
fviz_cluster(final, data = df) # plot the clusters
getwd()
library(pacman)
read.csv("Data/gapminder")
read.csv("Data/gapminder.csv")
df <-read.csv("Data/gapminder.csv")
View(df)
str(df)
df <-read.csv("Data/bikeVendors.csv")
View(df)
str(df)
# View data
top_n(df, 10)
# Adding a colume of average market share
library(tidyverse)
# View data structure
str(df)
df %>%
mutate(Avg.Mkt.Share = select(., Albuquerque.Cycles:Wichita.Speed) %>% rowSums(na.rm = TRUE))
View(df)
# View data structure
str(df)
df %>%
mutate(Avg = select(., Albuquerque.Cycles:Wichita.Speed) %>% rowSums(na.rm = TRUE))
View(df)
a <- df %>%
mutate(Avg = select(., Albuquerque.Cycles:Wichita.Speed) %>% rowSums(na.rm = TRUE))
View(a)
df <- df %>%
mutate(Avg = select(., Albuquerque.Cycles:Wichita.Speed) %>% rowSums(na.rm = TRUE)/30)
View(df)
levels(df$category1)
levels(df$category2)
# View data structure
str(df)
levels(df$frame)
# Explore data ####
plot(scatter(df$model~df$price))
# Explore data ####
scatter(df$model~df$price)
# Explore data ####
plot(df$model, df$price, main = "Price of bikes",
xlab = "bike model", ylab = "Price",
pch = 19, frame = FALSE)
# Explore data ####
# price
plot(df$model, sorted(df$price), main = "Price of bikes",
xlab = "bike model", ylab = "Price",
pch = 19, frame = FALSE)
df1 <- df[order(df$price),]
# Explore data ####
# price
plot(df1$model, df1$price, main = "Price of bikes",
xlab = "bike model", ylab = "Price",
pch = 19, frame = FALSE)
df1$price
# Explore data ####
# price
plot(df1$model, df1$price, main = "Price of bikes",
xlab = "bike model", ylab = "Price",
pch = 19, frame = FALSE)
df1 <- df[order(df$price),]
# Explore data ####
# price
plot(df1$model, df1$price, main = "Price of bikes",
xlab = "bike model", ylab = "Price",
pch = 19, frame = FALSE)
barplot(df1$price, names.arg=df1$model)
barplot(df1$price, names.arg=df1$model, xlab = "Bike model", ylab = "Price",
main = "Bike Price", col = "green")
barplot(df1$price, names.arg=df1$model, xlab = "Bike model", ylab = "Price",
main = "Bike Price", col = "green", border = "white")
barplot(df1$price, names.arg=df1$model, xlab = "Bike model", ylab = "Price",
main = "Bike Price", col = "green", border = "white", label)
boxplot(df$price)
boxplot(df$price, main = "Bike Price")
avg(df$price)
mean(df$price)
median(df$price)
quantile(df$price)
boxplot(df$price~df$category1)
# market share
plot(df$Avg)
# market share
plot(df$Avg, xlab = "Bikes")
mountain <- subset(x = df, sebset = category1 == "Mountain")
mountain <- subset(x = df, subset = category1 == "Mountain")
road <- subset(x = df, subset = category1 == "Road")
plot(mountain$Avg, type = "o", col = "red", xlab = "Bike model", ylab = "Average Market Share",
main = "Average market share of bikes by categories")
lines(road$Avg, type = "x", col = "blue")
lines(road$Avg, type = "o", col = "blue")
boxplot(df$Avg ~ df$category1)
boxplot(df$Avg ~ df$category1, ylab = "Average Market Share")
boxplot(df$price~df$category1, ylab = "Average Price") # Mountain bike vs Road bike
get(wd)
getwd
getwd()
a <- <- read.csv("Data/bikeVendors.csv")
a<- read.csv("Data/bikeVendors.csv")
knitr::opts_chunk$set(echo = TRUE)
# set working directory
setwd("/Users/birdfish/Documents/GitHub/EDA")
help("top_n")
# view top 10 rows
library(dplyr)
# find optimal number of clusters
set.seed(123)
fviz_nbclust(df, kmeans, method = "wss")
# find optimal number of clusters
library(cluster)
library(factoextra)
set.seed(123)
fviz_nbclust(df, kmeans, method = "wss")
price <- frame(df$model, df$price)
price <- data.frame(df$model, df$price)
price <- na.omit(price) # remove missing value
price <- scale(price) # scaling to avoid influence of unit
price <- scale(price$df.price) # scaling to avoid influence of unit
set.seed(123)
fviz_nbclust(df, kmeans, method = "wss")
fviz_nbclust(price, kmeans, method = "wss")
# Average Silhousette Method
fviz_nbclust(df, kmeans, method = "silhouette")
# Average Silhousette Method
fviz_nbclust(price, kmeans, method = "silhouette")
# Gap Statistic Method
gap_stat <- clusGap(price, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
# use 2 clusters
k2 <- kmeans(df, centers = 2, nstart = 25)
# use 2 clusters
k2 <- kmeans(price, centers = 2, nstart = 25)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
fviz_dist(price, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
fviz_cluster(k2, data = df)
View(price)
model <- df$model
bike_model <- df$model
bike_price <- df$price
price <- data.frame(bike_model, bike_price)
View(price)
price <- na.omit(price) # remove missing value
price <- scale(price$price) # scaling to avoid influence of unit
price <- na.omit(bike_price) # remove missing value
price <- scale(price$bike_price) # scaling to avoid influence of unit
price <- scale(price$bike-price) # scaling to avoid influence of unit
model_price <- data.frame(bike_model, bike_price)
str(model_price)
price <- na.omit(model_price) # remove missing value
model_price <- na.omit(model_price) # remove missing value
model_price <- scale(modelprice) # scaling to avoid influence of unit
model_price <- scale(model_price) # scaling to avoid influence of unit
model_price$bike_price <- as.numeric(model_price$bike_price)
str(model_price)
model_price <- na.omit(model_price) # remove missing value
model_price <- scale(model_price) # scaling to avoid influence of unit
str(mtcars)
dftest <- mtchars
dftest <- mtcars
str(dftest)
View(dftest)
model_price <- data.frame(bike_price)
row.names(model_price) <- bike_model
View(model_price)
model_price$bike_price <- as.numeric(model_price$bike_price)
str(model_price)
model_price <- na.omit(model_price) # remove missing value
model_price <- scale(model_price) # scaling to avoid influence of unit
set.seed(123)
fviz_nbclust(model_price, kmeans, method = "wss")
# Average Silhousette Method
fviz_nbclust(model_price, kmeans, method = "silhouette")
# Gap Statistic Method
gap_stat <- clusGap(model_price, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
# Average Silhousette Method
fviz_nbclust(model_price, kmeans, method = "silhouette")
# use 2 clusters
k2 <- kmeans(model_price, centers = 2, nstart = 25)
fviz_cluster(k2, data = df)
fviz_cluster(k2, data = model_price)
)
rm(bike_model)
rm(bike_price)
rm(model_price)
bike2 <- df
drops <- c("model", "category1", "category2", "frame")
bike2 <- bike2[, !(names(bike2) %in% drops)]
View(bike2)
bike_model <- df$model
row.names(bike2) <- bike_model
bike2$bike_price <- as.numeric(bike2$bike_price)
bike2$price <- as.numeric(bike2$price)
bike2 <- na.omit(bike2) # remove missing value
bike2 <- scale(bike2) # scaling to avoid influence of unit
bike2 <- na.omit(bike2) # remove missing value
set.seed(123)
fviz_nbclust(bike2, kmeans, method = "wss")
# Average Silhousette Method
fviz_nbclust(bike2, kmeans, method = "silhouette")
# Gap Statistic Method
gap_stat <- clusGap(bike2, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
# use 4 clusters
k4 <- kmeans(bike2, centers = 4, nstart = 25)
fviz_cluster(k4, data = bike2)
# Price ~ Category ANOVA
anova1 <- aov(Price~Category1, data = df)
# Price ~ Category ANOVA
anova1 <- aov(price~category1, data = df)
summary(anova1)
# Price ~ Category ANOVA
anova1 <- aov(price~category1 + Frame, data = df)
# Price ~ Category ANOVA
anova1 <- aov(price~category1 + frame, data = df)
summary(anova1)
# Price ~ Category t-test
price_category <- t.test(price~category1 + frame, data = df)
# Price ~ Category t-test
price_category <- t.test(price ~ category1 + frame, data = df)
# Price ~ Category t-test
price_category <- t.test(price ~ category1, data = df)
summary(price_category)
price_category
# Price ~ Category t-test
plot(density(df$price))
library(moments)
agostino.test(df$price)
agostino.test(sqrt(df$price))
agostino.test(sqrt(df$price)-10)
agostino.test(sqrt(df$price)-100)
agostino.test(sqrt(df$price)-10000)
agostino.test(sqrt(df$price))
price_category <- t.test(sqrt(price) ~ category1, data = df)
price_category
agostino.test(df$price)
levels(df$category2)
levels(df$frame)
# Price ~ Frame t test ----------------------------------------------
# View average price of different types of bikes
boxplot(df$price~df$frame, ylab = "Average Price")
price_category <- t.test(sqrt(price) ~ frame, data = df)
price_category
sorted_mkt <- df[order(df$price),] # sort data by average market share
subset(x = sorted_mkt,)
subset(x = sorted_mkt,
select = model & category1 & price & Avg)
subset(x = sorted_mkt,
select = model & category1 & price & Avg)
# sort data by average market share
sorted_mkt <- df[order(df$Avg),]
sorted_mkt[, c("model", "category1", "price", "Avg" )]
# sort data by average market share
sorted_mkt <- df[order(df$Avg, decreasing = TRUE),]
sorted_mkt[, c("model", "category1", "price", "Avg" )]
df <- df %>%
mutate(Avg_percentage = select(., Albuquerque.Cycles:Wichita.Speed) %>% rowSums(na.rm = TRUE)*100/30)
sorted_mkt[, c("model", "category1", "price", "Avg_percentage" )]
# sort data by average market share
sorted_mkt <- df[order(df$Avg_percentage, decreasing = TRUE),]
sorted_mkt[, c("model", "category1", "price", "Avg_percentage" )]
knitr::opts_chunk$set(echo = TRUE)
# View average price of different types of bikes
boxplot(df$price~df$category1, ylab = "Average Price")
plot(density(df$price))
# check distribution
plot(density(df$price))
# market share
plot(df$Avg, xlab = "Bikes")
# plot mountain bike mkt shares
plot(mountain$Avg, type = "o", col = "red", xlab = "Bike model", ylab = "Average Market Share",
main = "Average market share of bikes by categories")
# add line of road bike shares
lines(road$Avg, type = "o", col = "blue")
# plot mountain bike mkt shares
plot(mountain$Avg, type = "o", col = "red", xlab = "Bike model", ylab = "Average Market Share",
main = "Average market share of bikes by categories")
# add line of road bike shares
lines(road$Avg, type = "o", col = "blue")
# plot mountain bike mkt shares
plot(mountain$Avg, type = "o", col = "red", xlab = "Bike model", ylab = "Average Market Share",
main = "Average market share of bikes by categories")
# add line of road bike shares
lines(road$Avg, type = "o", col = "blue")
# plot mountain bike mkt shares
plot(mountain$Avg, type = "o", col = "red", xlab = "Bike model", ylab = "Average Market Share",
main = "Average market share of bikes by categories")
# plot mountain bike mkt shares
plot(mountain$Avg, type = "o", col = "red", xlab = "Bike model", ylab = "Average Market Share",
main = "Average market share of bikes by categories")
# add line of road bike shares
lines(road$Avg, type = "o", col = "blue")
knitr::opts_chunk$set(echo = TRUE)
# set working directory
setwd("/Users/birdfish/Documents/GitHub/EDA")
# plot mountain bike mkt shares
library(ggplot2)
mountain
